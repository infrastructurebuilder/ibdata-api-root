<model xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="false"
  xml.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/IBDataSet-${apiVersion}"
  xsd.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}">
  <id>persistedschema</id>
  <name>PersistedIBSchema</name>
  <!-- Must be a single (no spaces, no dashes, no periods) identifier in
    order to create reader/writer -->
  <description>Generate reader for schemas</description>
  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.model</value>
    </default>
  </defaults>
  <versionDefinition>
    <type>field</type>
    <value>modelVersion</value>
  </versionDefinition>
  <classes>
    <!-- MODEL -->

    <class xml.tagName="schema" rootElement="true"
      java.clone.hook="mutatingDataSchemaCloneHook" java.clone="deep">
      <name>PersistedIBSchema</name>
      <version>1.0.0+</version>
      <description>
        <![CDATA[
        The <code>&lt;schema&gt;</code> element contains information about a single schema.
        ]]>
      </description>
      <interfaces>
        <interface>org.infrastructurebuilder.data.IBSchema</interface>
      </interfaces>
      <fields>
        <field>
          <name>modelVersion</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Declares to which version of descriptor this configuration conforms.
            This value is the api version (major.minor) for transportable schemas and conforms to semantic versioning</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>uuid</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>UUID identifier of the DataSchema, which is the UUID from the sha512 field.</description>
          <type>String</type>
        </field>
        <field>
          <name>sha512</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>calculated SHA-512 of the other values in the schema.  This value is used to produce the uuid. </description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>url</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Original URL source</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full name of the DataSchema.</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>nameSpace</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full namespace of the DataSchema.</description>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the DataSchema</description>
          <required>true</required>
          <type>String</type>
        </field>
        <field>
          <name>mimeType</name>
          <version>1.0.0+</version>
          <description>Stringified version of a MIME type for the datastream</description>
          <required>true</required>
          <defaultValue>application/octet-stream</defaultValue>
          <type>String</type>
        </field>

        <field xml.format="yyyy-MM-dd'T'HH:mm:ss.SSS">
          <name>creationDate</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Creation date of this stream, required</description>
          <type>Date</type>
        </field>
        <field java.getter="false">
          <name>metadata</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Additional metadata</description>
          <type>DOM</type>
        </field>
        <field>
          <name>type</name>
          <version>1.0.0+</version>
          <association>
            <type>SchemaType</type>
            <multiplicity>1</multiplicity>
          </association>
          <required>true</required>
        </field>
        <field>
          <name>fields</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Fields of this structure</description>
          <association>
            <type>SchemaField</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>indexes</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Mechanisms for describing indexing in target systems</description>
          <association>
            <type>SchemaIndex</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>forcedMap</name>
          <version>1.0.0+</version>
          <description>A uuid that indicates a DataStream
          element that holds a specific impl of a schema for this schema. This allows
          one to override the generated schema (which we strongly recommend against)
          in favor of a type-specific schema to be supplied to the underlying type
          </description>
          <required>false</required>
          <association>
            <multiplicity>*</multiplicity>
            <type>ForcedMapping</type>
          </association>
        </field>

      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
    Default constructor
  */
  public PersistedIBSchema() {
    this.setCreationDate(new java.util.Date());
    this.setFields(new java.util.ArrayList<>());
  }
            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   "Copy constructor"
   */
  public PersistedIBSchema(PersistedIBSchema ds) {
    this.setCreationDate(ds.getCreationDate());
    this.setSha512(ds.getSha512());
    this.setDescription(ds.getDescription().orElse(null));
    this.setName(ds.getName().orElse(null));
    this.setNameSpace(ds.getNameSpace().orElse(null));
    this.setMetadata(ds.getMetadata());
    this.setMimeType(ds.getMimeType());
    this.setFields(ds.getFields().stream().map(SchemaField::new).collect(java.util.stream.Collectors.toList()));
    this.setUuid(java.util.Optional.ofNullable(ds.getUuid()).map(java.util.UUID::toString).orElse(null));
    this.setForcedMap(ds.getForcedMap().stream().collect(java.util.stream.Collectors.toList()));
    this.setUrl(ds.getUrl().orElse(null));

    mutatingDataSchemaCloneHook(this);
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  /**
    * Clone hook. The contract is that you must write a <code>.clone()</code> of the
    * DataSchemaSet
    */
  private void mutatingDataSchemaCloneHook(PersistedIBSchema s) {
    if ( this.fields != null )
    {
        for ( int i = 0; i < s.fields.size(); ++i )
        {
          s.fields.get(i).setIndex(i);
        }
    }
    org.infrastructurebuilder.util.artifacts.Checksum cs = s.asChecksum();
    s.setSha512(cs.toString());
    s.setUuid(cs.get().get().toString());
  }

  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public int hashCode() {
    return java.util.Objects.hash(uuid, nameSpace, name, creationDate, description, fields, indexes, metadata);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    PersistedIBSchema other = (PersistedIBSchema) obj;
    return
           java.util.Objects.equals(uuid, other.uuid)
        && java.util.Objects.equals(nameSpace, other.nameSpace)
        && java.util.Objects.equals(name, other.name)
        && java.util.Objects.equals(creationDate, other.creationDate)
        && java.util.Objects.equals(description, other.description)
        && java.util.Objects.equals(mimeType, other.mimeType)
        && java.util.Objects.equals(fields, other.fields)
        && java.util.Objects.equals(indexes, other.indexes)
        && java.util.Objects.equals(metadata, other.metadata)
        ;
  }

  @Override
  public String toString() {
    return "PersistedIBSchema [uuid=" + uuid + ", nameSpace=" + nameSpace
        + ", name=" + name + ", description=" + description + ", creationDate="
        + creationDate + "mimeType = " + mimeType
        + ", metadata=" + metadata
        + ", fields=" + fields
        + ", indexes=" + indexes
        + "]";
  }

  @Override
  public java.util.Map<String, java.util.List<java.util.UUID>> getSchemaResourcesMappedFromName() {
    return java.util.Collections.emptyMap();
  }


            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   * @return the UUID from this schema uuid string field (or null)
   */
  @Override
  public java.util.UUID getUuid() {
     return safeMapUUID.apply(this.uuid).orElse(null);
  }            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private String temporaryId;  // Never persisted
  /**
   * Set a temporary value to the UUID field for processing
   */
  public void setTemporaryId(String id) {
    this.temporaryId = id;
  }

  public java.util.Optional<String> getTemporaryId() {
    return java.util.Optional.ofNullable(this.temporaryId);
  }

              ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   * @return the name if available
   */
  @Override
  public java.util.Optional<String> getNameSpace() {
     return java.util.Optional.ofNullable(nameSpace);
  }
  /**
   * @return the name if available
   */
  @Override
  public java.util.Optional<String> getName() {
     return java.util.Optional.ofNullable(name);
  }
  /**
   * @return the description if available
   */
  @Override
  public java.util.Optional<String> getDescription() {
     return java.util.Optional.ofNullable(description);
  }

  /**
   * @return the description if available
   */
  @Override
  public java.util.Optional<String> getUrl() {
     return java.util.Optional.ofNullable(url);
  }

  @Override
  public org.infrastructurebuilder.data.Metadata getMetadata() {
      if (this.metadata == null)
         this.metadata = new org.infrastructurebuilder.data.Metadata();
      if (!(this.metadata instanceof org.infrastructurebuilder.data.Metadata))
        this.metadata = new org.infrastructurebuilder.data.Metadata(this.metadata);
      return (org.infrastructurebuilder.data.Metadata) this.metadata;
  }
              ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   * Return a sorted set of the schema fields
   */
  @Override
  public java.util.SortedSet<org.infrastructurebuilder.data.IBField> getSchemaFields() {
    return getFields().stream().sorted().collect(java.util.stream.Collectors.toCollection(java.util.TreeSet::new));
  }
              ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   * Return a sorted set of the schema fields
   */
  @Override
  public java.util.SortedSet<org.infrastructurebuilder.data.IBIndex> getSchemaIndexes() {
    return getIndexes().stream().sorted().collect(java.util.stream.Collectors.toCollection(java.util.TreeSet::new));
  }
              ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>

    <class xml.tagName="forcedMapping" java.clone="deep">
      <name>ForcedMapping</name>
      <version>1.0.0+</version>
      <description>Force a mapping between a schema and
      a datastream AS A TYPE-SPECIFIC-SCHEMA</description>
      <fields>
        <field>
          <name>type</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The "type"
      of the schema. This is some arbitrary per-implementation identifier.</description>
          <type>String</type>
        </field>
        <field>
          <name>schemaUUID</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>UUID of an existing DataStream that
      holds the schema for that provider for this Schema instance</description>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[ public java.util.UUID getUUID() { return org.infrastructurebuilder.util.artifacts.ChecksumEnabled.nullableSafeMapUUID.apply(getSchemaUUID());
      } ]]> </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class xml.tagName="field" java.clone.hook="mutatingCloneHook"
      java.clone="deep">
      <name>SchemaField</name>
      <version>1.0.0+</version>
      <description> <![CDATA[ The <code>&lt;schema&gt;</code>
      element contains information about a single schema. ]]> </description>
      <interfaces>
        <interface>org.infrastructurebuilder.data.IBField</interface>
      </interfaces>
      <fields>
        <field>
          <name>index</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Describes the IBfield from a base of 0. Default value set to
      -1 to ensure setting proper index. Indices are forced reset prior to persistence.</description>
          <type>int</type>
          <defaultValue>-1</defaultValue>
        </field>
        <field>
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full
      name of the SchemaField. This name may be munged during translation.</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the SchemaField</description>
          <type>String</type>
        </field>
        <field>
          <name>type</name>
          <description>Value must match the typing
      enumeration in IBData (currently found in IBDataStructuredDataMetadataType).
      The default value (STREAM) indicates that this schema denotes a single file
      that is a stream of bytes, and that that is the most structure that can be
      inferred. Due to the nature of STREAM, it is very important to correctly
      set the SchemaField type.</description>
          <type>String</type>
          <required>true</required>
          <defaultValue>STREAM</defaultValue>
        </field>
        <field>
          <name>nullable</name>
          <description>If true, then this field is allowed to be null.</description>
          <type>boolean</type>
          <required>true</required>
          <defaultValue>false</defaultValue>
        </field>
        <field>
          <name>enumerations</name>
          <description>List of named enumerations
      for this field.</description>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <required>false</required>
        </field>
        <field>
          <name>versionAppeared</name>
          <description>version where this SchemaField became valid. Versions should
      be truncated to api version. This field is required when updating a schema
      to a new version.</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field>
          <name>deprecated</name>
          <description>If set to true, this
      SchemaField is deprecated. Schema deprecation is different than language
      deprecation. A deprecated field is not represented in outbound schema, but
      might be accepted as inbound schema. Deprecation definitely means different
      things to different underlying providers, but it may (likely) not be possible
      to back out a deprecation. For some providers, the only means of moving forward
      is to re-add the field as a new field with a later "versionAppeared".</description>
          <type>boolean</type>
          <required>false</required>
        </field>
        <field>
          <name>versionDeprecated</name>
          <description>version where this SchemaField became invalid. Versions should
      be truncated to api version. This field is required when producing a deprecation
      (note that a non-null value here does not indicate a deprecation. The flag
      must still be set in order to deprecate).</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field java.getter="false">
          <name>metadata</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Additional metadata</description>
          <type>DOM</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
   /** * Default constructor */
  public SchemaField() {
    this.setMetadata(new org.infrastructurebuilder.data.Metadata());
  }

  /**
   * * Copy constructor (should match clone)
   */
  public SchemaField(SchemaField ds) {
    this.setIndex(ds.getIndex());
    this.setName(ds.getName());
    this.setDescription(ds.getDescription());
    this.setType(ds.getType());
    this.setNullable(ds.isNullable());
    this.setEnumerations(java.util.Optional.ofNullable(getEnumerations())
        .map(e -> e.stream().collect(java.util.stream.Collectors.toList())).orElse(null));
    this.setVersionAppeared(ds.getVersionAppeared());
    this.setDeprecated(ds.isDeprecated());
    this.setVersionDeprecated(ds.getVersionDeprecated());
    this.setMetadata(ds.getMetadata());
    mutatingCloneHook(this);
  }
]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
  private void mutatingCloneHook(SchemaField s)

  {
    if (!"ENUM".equals(s.getType())) {
      s.setEnumerations(null);
    }
    if (s.getIndex() < 0)
      throw new org.infrastructurebuilder.data.IBDataException("Index improperly set");
  }

 ]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
<![CDATA[

 /**
   * Hash code depends solely on index
   */
 @Override
  public int hashCode() {
    return java.util.Objects.hash(
          index
//        , name
//        , description
//        , type
//        , nullable
//        , enumerations
//        , versionAppeared
//        , deprecated
//        , versionDeprecated
//        , metadata
        );
  }

 /**
   * DANGER!!! Contract violation!!!! equals depends solely on index
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!(obj instanceof SchemaField))
      return false;
    SchemaField other = (SchemaField) obj;
    return
          index == other.index
//       && java.util.Objects.equals(name, other.name)
//       && java.util.Objects.equals(description, other.description)
//       && java.util.Objects.equals(type, other.type)
//       && nullable == other.nullable
//       && java.util.Objects.equals(enumerations, other.enumerations)
//       && java.util.Objects.equals(versionAppeared, other.versionAppeared)
//       && deprecated == other.deprecated
//       && java.util.Objects.equals(versionDeprecated, other.versionDeprecated)
//       && java.util.Objects.equals(metadata, other.metadata)
        ;
  }
]]>
</code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  private org.infrastructurebuilder.data.IBDataStructuredDataFieldMetadata transientStructuredFieldMetadata = null;
  @Override
  public java.util.Optional<org.infrastructurebuilder.data.IBDataStructuredDataFieldMetadata> getTransientStructuredFieldMetadata() {
      return java.util.Optional.of(this.transientStructuredFieldMetadata);
  }
  public void setTransientStructuredFieldMetadata(
      org.infrastructurebuilder.data.IBDataStructuredDataFieldMetadata transientStructuredFieldMetadata) {
    this.transientStructuredFieldMetadata = transientStructuredFieldMetadata;
  }
          ]]>
          </code>


        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
      <![CDATA[
  @Override
  public org.infrastructurebuilder.data.Metadata getMetadata() {
      if (this.metadata == null)
         this.metadata = new org.infrastructurebuilder.data.Metadata();
      if (!(this.metadata instanceof org.infrastructurebuilder.data.Metadata))
        this.metadata = new org.infrastructurebuilder.data.Metadata(this.metadata);
      return (org.infrastructurebuilder.data.Metadata) this.metadata;
  }

      ]]>
      </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
      <![CDATA[
        @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("SchemaField [index=").append(index).append(", name=").append(name).append(", description=")
        .append(description).append(", type=").append(type).append(", nullable=").append(nullable)
        .append(", enumerations=").append(enumerations).append(", versionAppeared=").append(versionAppeared)
        .append(", deprecated=").append(deprecated).append(", versionDeprecated=").append(versionDeprecated)
        .append(", metadata=").append(metadata).append(", transientStructuredFieldMetadata=")
        .append(transientStructuredFieldMetadata).append("]");
    return builder.toString();
    }
      ]]>
      </code>
        </codeSegment>
      </codeSegments>
    </class>







    <class xml.tagName="indexedField"
      java.clone.hook="mutatingCloneHook" java.clone="deep">
      <name>IndexField</name>
      <version>1.0.0+</version>
      <description>Describes a field element that is part of an index </description>
      <interfaces>
        <interface>org.infrastructurebuilder.data.IBIndexField</interface>
      </interfaces>
      <fields>
        <field>
          <name>index</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The index of the field.</description>
          <type>int</type>
          <defaultValue>-1</defaultValue>
        </field>
        <field>
          <name>type</name>
          <description>Value must match the typing enumeration in IBData (currently found in IBFieldIndexType).  The default value (DEFAULT) indicates that this index is ordered according to default underlying technology</description>
          <type>String</type>
          <required>true</required>
          <defaultValue>DEFAULT</defaultValue>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
   /** * Default constructor */
  public IndexField() {
  }

  /**
   * * Copy constructor (should match clone)
   */
  public IndexField(IndexField ds) {
    this.setIndex(ds.getIndex());
    this.setType(ds.getType());
    mutatingCloneHook(this);
  }
]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
  private void mutatingCloneHook(IndexField s)

  {
  }

 ]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
<![CDATA[

@Override
  public int hashCode() {
    return java.util.Objects.hash(
          index
        , type);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!(obj instanceof IndexField))
      return false;
    IndexField other = (IndexField) obj;
    return index == other.index
        && java.util.Objects.equals(type, other.type);
  }

]]>
</code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
      <![CDATA[
    @Override
    public String toString() {
        return  new StringBuilder().append("IndexField [")
          .append("index=").append(index)
          .append("type=").append(type)
          .append("]").toString();
    }
      ]]>
      </code>
        </codeSegment>
      </codeSegments>
    </class>



    <class xml.tagName="index" java.clone.hook="mutatingCloneHook"
      java.clone="deep">
      <name>SchemaIndex</name>
      <version>1.0.0+</version>
      <description> <![CDATA[ The <code>&lt;schema&gt;</code>
      element contains information about a single schema. ]]> </description>
      <interfaces>
        <interface>org.infrastructurebuilder.data.IBIndex</interface>
      </interfaces>
      <fields>
        <field>
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full name of the SchemaIndex. This name may be munged during translation.</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the SchemaIndex</description>
          <type>String</type>
        </field>
        <field>
          <name>type</name>
          <description>Value must match the typing
      enumeration in IBData (currently found in IBDataIndexingType).
      The default value (DEFAULT) indicates that this index is non-unique ascending naturally ordered</description>
          <type>String</type>
          <required>true</required>
          <defaultValue>DEFAULT</defaultValue>
        </field>
        <field>
          <name>unique</name>
          <description>If true, then this field is allowed to be null.</description>
          <type>boolean</type>
          <required>true</required>
          <defaultValue>false</defaultValue>
        </field>
        <field>
          <name>versionAppeared</name>
          <description>version where this SchemaIndex became valid. Versions should
      be truncated to api version. This field is required when updating a schema
      to a new version.</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field>
          <name>deprecated</name>
          <description>If set to true, this
      SchemaIndex is deprecated. Schema deprecation is different than language
      deprecation. A deprecated field is not represented in outbound schema, but
      might be accepted as inbound schema. Deprecation definitely means different
      things to different underlying providers, but it may (likely) not be possible
      to back out a deprecation. For some providers, the only means of moving forward
      is to re-add the field as a new field with a later "versionAppeared".</description>
          <type>boolean</type>
          <required>false</required>
        </field>
        <field>
          <name>versionDeprecated</name>
          <description>version where this SchemaIndex became invalid. Versions should
      be truncated to api version. This field is required when producing a deprecation
      (note that a non-null value here does not indicate a deprecation. The flag
      must still be set in order to deprecate).</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field>
          <name>fields</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Targeted fields by name</description>
          <association>
            <type>IndexField</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>


      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
   /** * Default constructor */
  public SchemaIndex() {
  }

  /**
   * * Copy constructor (should match clone)
   */
  public SchemaIndex(SchemaIndex ds) {
    this.setName(ds.getName());
    this.setDescription(ds.getDescription());
    this.setType(ds.getType());
    this.setUnique(ds.isUnique());
    this.setVersionAppeared(ds.getVersionAppeared());
    this.setDeprecated(ds.isDeprecated());
    this.setVersionDeprecated(ds.getVersionDeprecated());
    this.setFields(ds.getFields().stream().collect(java.util.stream.Collectors.toList()));
    mutatingCloneHook(this);
  }
]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code> <![CDATA[
  private void mutatingCloneHook(SchemaIndex s)
  {
    if (s.fields == null)
      s.setFields(new java.util.ArrayList<>());

  }

 ]]> </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
<![CDATA[

@Override
  public int hashCode() {
    return java.util.Objects.hash(
          description
        , name
        , type
        , unique
        , versionAppeared
        , versionDeprecated);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!(obj instanceof SchemaIndex))
      return false;
    SchemaIndex other = (SchemaIndex) obj;
    return java.util.Objects.equals(description, other.description)
        && java.util.Objects.equals(name, other.name)
        && java.util.Objects.equals(type, other.type)
        && unique == other.unique
        && java.util.Objects.equals(versionAppeared, other.versionAppeared)
        && java.util.Objects.equals(versionDeprecated, other.versionDeprecated);
  }

]]>
</code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
      <![CDATA[
    @Override
    public String toString() {
        return  new StringBuilder().append("SchemaIndex [")
          .append("type=").append(type)
          .append(", unique=").append(unique)
          .append(", name=").append(name)
          .append(", description=").append(description)
          .append(", versionAppeared=").append(versionAppeared)
          .append(", versionDeprecated=").append(versionDeprecated)
          .append("]").toString();
    }
      ]]>
      </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
      <![CDATA[

    @Override
    public java.util.SortedSet<org.infrastructurebuilder.data.IBIndexField> getIndexFields() {
      if ( this.fields == null )
      {
          this.fields = new java.util.ArrayList<IndexField>();
      }

      return this.fields.stream().collect(java.util.stream.Collectors.toCollection(java.util.TreeSet::new));
    }

      ]]>
      </code>
        </codeSegment>
      </codeSegments>
    </class>






    <!-- <class java.clone="deep"> <name>PersistedIBSchemaInputLocation</name>
      <version>1.0.0+</version> <fields> </fields> <codeSegments> <codeSegment>
      <version>1.0.0+</version> <code> <![CDATA[ @Override public String toString()
      { return getLineNumber() + " : " + getColumnNumber() + ", " + getSource();
      } ]]> </code> </codeSegment> </codeSegments> </class> <class sourceTracker="source"
      java.clone="shallow"> <name>PersistedIBSchemaInputSource</name> <version>1.0.0+</version>
      <fields> <field> <name>modelId</name> <version>1.0.0+</version> <type>String</type>
      </field> <field> <name>location</name> <version>1.0.0+</version> <type>String</type>
      </field> </fields> <codeSegments> <codeSegment> <version>1.0.0+</version>
      <code> <![CDATA[ @Override public String toString() { return getModelId()
      + " " + getLocation(); } ]]> </code> </codeSegment> </codeSegments> </class> -->
    <class xml.tagName="gav" java.clone="deep">
      <name>Dependency</name>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>groupId</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Group ID</description>
          <type>String</type>
        </field>
        <field>
          <name>artifactId</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>ArtifactId ID</description>
          <type>String</type>
        </field>
        <field>
          <name>version</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>version</description>
          <type>String</type>
        </field>
        <field>
          <name>extension</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>extension (not type-mapped)</description>
          <type>String</type>
        </field>
        <field>
          <name>classifier</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Addl classifier</description>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  public Dependency() {
  }
  public Dependency(org.infrastructurebuilder.util.artifacts.GAV g) {
    this.groupId = g.getGroupId();
    this.artifactId = g.getArtifactId();
    this.version = g.getVersion().orElse(null);
    this.classifier = g.getClassifier().orElse(null);
    this.extension = g.getExtension();
  }


  @Override
    public int hashCode() {
      return java.util.Objects.hash(groupId, artifactId, classifier, extension, version);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      Dependency other = (Dependency) obj;
      return
             java.util.Objects.equals(groupId, other.groupId)
          && java.util.Objects.equals(artifactId, other.artifactId)
          && java.util.Objects.equals(classifier, other.classifier)
          && java.util.Objects.equals(extension, other.extension)
          && java.util.Objects.equals(version, other.version);
    }

  @Override
    public String toString() {
      return "Dependency [groupId=" + groupId + ", artifactId=" + artifactId + ", version=" + version + ", extension="
          + extension + ", classifier=" + classifier + "]";
    }

  public org.infrastructurebuilder.util.artifacts.GAV asGAV() {
    return new org.infrastructurebuilder.util.artifacts.impl.DefaultGAV(groupId, artifactId, classifier, version, extension);
  }
    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>

    <class xml.tagName="schemaType" java.clone="deep">
      <name>SchemaType</name>
      <version>1.0.0+</version>
      <interfaces>
        <interface>org.infrastructurebuilder.data.IBSchemaType</interface>
      </interfaces>
      <fields>
        <field>
          <name>type</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Schema technology identifier (component hint)</description>
          <defaultValue>default</defaultValue>
          <type>String</type>
        </field>
        <field>
          <name>technology</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Technology underlying the schema management</description>
          <defaultValue>ibdata</defaultValue>
          <type>String</type>
        </field>
        <field java.getter="false">
          <name>versionedProvider</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Identifier for the underlying provider's artifact</description>
          <defaultValue>:::</defaultValue>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  public SchemaType() {
  }
  public SchemaType(org.infrastructurebuilder.data.IBSchemaType g) {
    this.type = g.getType();
    this.technology = g.getTechnology();
    this.versionedProvider = g.getVersionedProvider().orElse(null);
  }
  public SchemaType(String type, String tech, java.util.Optional<String> prov) {
    this.type = java.util.Objects.requireNonNull(type);
    this.technology = java.util.Objects.requireNonNull(tech);
    this.versionedProvider = java.util.Objects.requireNonNull(prov).orElse(null);
  }

  @Override
  public java.util.Optional<String> getVersionedProvider() {
      return java.util.Optional.ofNullable(versionedProvider);
  }

  @Override
    public int hashCode() {
      return java.util.Objects.hash(type, technology, versionedProvider);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      SchemaType other = (SchemaType) obj;
      return
             java.util.Objects.equals(type, other.type)
          && java.util.Objects.equals(technology, other.technology)
          && java.util.Objects.equals(getVersionedProvider(), other.getVersionedProvider())
          ;
    }


    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>

  </classes>
</model>