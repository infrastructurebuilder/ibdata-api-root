<model xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="false"
  xml.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/IBDataSet-${apiVersion}"
  xsd.namespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/IBDataSet/${apiVersion}">
  <id>schema</id>
  <name>IBDataSchema</name>
  <!-- Must be a single (no spaces, no dashes, no periods) identifier in
    order to create reader/writer -->
  <description>Model for translating schemas among datastore types</description>
  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.model</value>
    </default>
  </defaults>
  <versionDefinition>
    <type>field</type>
    <value>modelVersion</value>
  </versionDefinition>
  <classes>
    <!-- MODEL -->
    <class xml.tagName="schemas" rootElement="true"
      java.clone.hook="mutatingIBSchemaSetCloneHook" java.clone="deep">
      <name>IBSchemaSet</name>
      <description>
        <![CDATA[
        The <code>&lt;schemas&gt;</code> element is the root of the configuration.
        ]]>
      </description>
      <version>1.0.0+</version>
      <interfaces>
        <interface>org.infrastructurebuilder.util.artifacts.ChecksumEnabled</interface>
      </interfaces>
      <fields>
        <field>
          <name>modelVersion</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Declares to which version of descriptor this configuration conforms.
            This value is the api version (major.minor) for transportable schemas and conforms to semantic versioning</description>
          <type>String</type>
        </field>
        <field>
          <name>groupId</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Namespace of the schema list.  This defaults to the project.groupId of the building project</description>
          <type>String</type>
        </field>
        <field>
          <name>artifactId</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Artifact Identifier of the schema list.  This defaults to the project.artifactId of the building project</description>
          <type>String</type>
        </field>
        <field>
          <name>version</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Version of the schema list.  This defaults to the project.version of the building project</description>
          <type>String</type>
        </field>
        <field>
          <name>classifier</name>
          <version>1.0.0+</version>
          <required>false</required>
          <description>Classifier of the schema list.  This defaults to the project.classifier of the building project</description>
          <type>String</type>
        </field>
        <field>
          <name>uuid</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>UUID identifier of the schema set.  This is the UUID from the Checksums of the contained schemas</description>
          <type>String</type>
        </field>
        <field>
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full name of the schema set.  This defaults to the project.name of the building project</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the schema set.  This defaults to the project.description of the building project</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field xml.format="yyyy-MM-dd'T'HH:mm:ss.SSS">
          <name>creationDate</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>A Date that is very close to the moment when this was persisted</description>
          <type>Date</type>
        </field>
        <field>
          <name>schemas</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Instances of Schema</description>
          <association>
            <type>IBSchema</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>metadata</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Additional metadata</description>
          <type>DOM</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            /* Inject GAV from source tree */

  public void injectGAV(org.infrastructurebuilder.util.artifacts.GAV gav) {
      this.setGroupId(gav.getGroupId());
      this.setArtifactId(gav.getArtifactId());
      this.setVersion(gav.getVersion().get());
      this.setClassifier(gav.getClassifier().orElse(null));
  }
            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  // Default constructor (Must do this if you supply a constructor)
  public IBSchemaSet() {
    this.setCreationDate(new java.util.Date());
    this.setSchemas(new java.util.ArrayList<>());
  }
  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /*
   * Copy constructor
   *
   */
  public IBSchemaSet(IBSchemaSet ds) {
    this.setModelVersion(ds.getModelVersion());
    this.setGroupId(ds.getGroupId());
    this.setArtifactId(ds.getArtifactId());
    this.setVersion(ds.getVersion());
    this.setClassifier(ds.getClassifier());
    this.setName(ds.getName());
    this.setDescription(ds.getDescription());
    this.setCreationDate(ds.getCreationDate());
    this.setMetadata(ds.getMetadata());
    this.setSchemas(ds.getSchemas().stream().map(IBSchema::new).collect(java.util.stream.Collectors.toList()));
    this.setUuid(ds.getUuid());
    mutatingIBSchemaSetCloneHook(this);
  }
  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /*
   * Clone Hook.  Force the UUID to be the checksum of the underlying data elements
   *
   */
  private void mutatingIBSchemaSetCloneHook(IBSchemaSet ds) {
    this.setUuid(asChecksum().get().get().toString());
  }

  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            @Override
  public int hashCode() {
    return java.util.Objects.hash(artifactId, classifier, creationDate, description, groupId, metadata, modelEncoding,
        modelVersion, name, schemas, version);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    IBSchemaSet other = (IBSchemaSet) obj;
    return java.util.Objects.equals(artifactId, other.artifactId)
        && java.util.Objects.equals(classifier, other.classifier)
        && java.util.Objects.equals(creationDate, other.creationDate)
        && java.util.Objects.equals(description, other.description)
        && java.util.Objects.equals(groupId, other.groupId)
        && java.util.Objects.equals(metadata, other.metadata)
        && java.util.Objects.equals(modelEncoding, other.modelEncoding)
        && java.util.Objects.equals(modelVersion, other.modelVersion)
        && java.util.Objects.equals(name, other.name)
        && java.util.Objects.equals(schemas, other.schemas)
        && java.util.Objects.equals(version, other.version);
  }



  @Override
  public String toString() {
    return "IBSchemaSet [modelVersion=" + modelVersion + ", groupId=" + groupId + ", artifactId=" + artifactId
        + ", version=" + version + ", classifier=" + classifier + ", uuid=" + uuid + ", name=" + name + ", description="
        + description + ", creationDate=" + creationDate + ", schemas=" + schemas + ", metadata=" + metadata
        + ", modelEncoding=" + modelEncoding + "]";
  }

  ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public org.infrastructurebuilder.util.artifacts.Checksum asChecksum() {
    return org.infrastructurebuilder.util.artifacts.ChecksumBuilder.newInstance()
    .addString(getModelVersion())
    .addString(getModelEncoding())
    .addString(getGroupId())
    .addString(getArtifactId())
    .addString(getVersion())
    .addString(getClassifier())
    .addString(getName())
    .addString(getDescription())
    .addDate(getCreationDate())
    .addString(getMetadata().toString())
    .addListChecksumEnabled(getSchemas().stream().collect(java.util.stream.Collectors.toList()))
    .asChecksum();
  }
  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            //
            // ID mapper Work
            //
//  @Override
  public java.util.UUID getId() {
     return org.infrastructurebuilder.data.IBDataModelUtils.safeMapUUID.apply(getUuid()).orElse(null);
  }            ]]>
          </code>
        </codeSegment>
      </codeSegments>

    </class>
    <class xml.tagName="schema"
      java.clone.hook="mutatingIBSchemaCloneHook" java.clone="deep">
      <name>IBSchema</name>
      <version>1.0.0+</version>
      <description>
        <![CDATA[
        The <code>&lt;schema&gt;</code> element contains information about a single schema.
        ]]>
      </description>
      <interfaces>
        <interface>org.infrastructurebuilder.util.artifacts.ChecksumEnabled</interface>
      </interfaces>
      <interfaces>
        <interface><![CDATA[Comparable<IBSchema>]]></interface>
      </interfaces>

      <fields>
        <field>
          <name>uuid</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>UUID identifier of the IBSchema, which is the UUID from the checksum of the checksums of the other fields in the schema.</description>
          <type>String</type>
        </field>
        <field>
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full name of the IBSchema.</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the IBSchema</description>
          <required>true</required>
          <type>String</type>
        </field>
        <field xml.format="yyyy-MM-dd'T'HH:mm:ss.SSS">
          <name>creationDate</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Creation date of this stream, required</description>
          <type>Date</type>
        </field>
        <field>
          <name>metadata</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Additional metadata</description>
          <type>DOM</type>
        </field>
        <field>
          <name>fields</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Fields of this structure</description>
          <association>
            <type>IBField</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>

      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public org.infrastructurebuilder.util.artifacts.Checksum asChecksum() {
    return org.infrastructurebuilder.util.artifacts.ChecksumBuilder.newInstance()
        .addString(getName())
        .addString(getDescription())
        .addDate(getCreationDate())
        .addString(getMetadata().toString())
        .addListChecksumEnabled(getFields().stream().collect(java.util.stream.Collectors.toList()))
        .asChecksum();
  }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public int compareTo(IBSchema s) {
    return asChecksum().toString().compareTo(asChecksum().toString());
  }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
    Default constructor
  */
  public IBSchema() {
    this.setCreationDate(new java.util.Date());
    this.setFields(new java.util.ArrayList<>());
  }
            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  /**
   "Copy constructor"
   */
  public IBSchema(IBSchema ds) {
    this.setCreationDate(ds.getCreationDate());
    this.setDescription(ds.getDescription());
    this.setName(ds.getName());
    this.setMetadata(ds.getMetadata());
    this.setFields(ds.getFields().stream().map(IBField::new).collect(java.util.stream.Collectors.toList()));
    this.setUuid(ds.getUuid());
    mutatingIBSchemaCloneHook(this);
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

  /**
    * Clone hook. The contract is that you must write a <code>.clone()</code> of the
    * IBSchemaSet
    */
  private void mutatingIBSchemaCloneHook(IBSchema s) {
    if ( this.fields != null )
    {
        for ( int i = 0; i < s.fields.size(); ++i )
        {
          s.fields.get(i).setIndex(i);
        }
    }
    s.setUuid(s.asChecksum().get().get().toString());
  }

  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public int hashCode() {
    return java.util.Objects.hash(uuid, name, creationDate, description, fields, metadata);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    IBSchema other = (IBSchema) obj;
    return
           java.util.Objects.equals(uuid, other.uuid)
        && java.util.Objects.equals(name, other.name)
        && java.util.Objects.equals(creationDate, other.creationDate)
        && java.util.Objects.equals(description, other.description)
        && java.util.Objects.equals(fields, other.fields)
        && java.util.Objects.equals(metadata, other.metadata)
        ;
  }

  @Override
  public String toString() {
    return "IBSchema [uuid=" + uuid + ", name=" + name + ", description=" + description + ", creationDate="
        + creationDate + ", metadata=" + metadata + ", fields=" + fields + "]";
  }


            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            //
            // ID mapper Work
            //
//  @Override
  public java.util.UUID getId() {
     return org.infrastructurebuilder.data.IBDataModelUtils.safeMapUUID.apply(getUuid()).orElse(null);
  }            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
//  public java.util.Optional<org.infrastructurebuilder.data.IBDataStructuredDataMetadata> getStructuredDataMetadata() {
//    return java.util.Optional.ofNullable(this.getStructuredDataDescriptor());
//  }            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class locationTracker="locations" java.clone="shallow">
      <name>IBSchemasInputLocation</name>
      <version>1.0.0+</version>
      <fields>
        <!-- line, column and source fields are auto-generated by Modello -->
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[

    @Override
    public String toString()
    {
        return getLineNumber() + " : " + getColumnNumber() + ", " + getSource();
    }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class sourceTracker="source" java.clone="shallow">
      <name>IBSchemasInputSource</name>
      <version>1.0.0+</version>
      <fields>
        <field>
          <name>modelId</name>
          <version>1.0.0+</version>
          <type>String</type>
        </field>
        <field>
          <name>location</name>
          <version>1.0.0+</version>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
    @Override
    public String toString()
    {
        return getModelId() + " " + getLocation();
    }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>


    <class xml.tagName="field"
      java.clone.hook="mutatingIBFieldCloneHook" java.clone="deep">
      <name>IBField</name>
      <version>1.0.0+</version>
      <description>
        <![CDATA[
        The <code>&lt;schema&gt;</code> element contains information about a single schema.
        ]]>
      </description>
      <interfaces>
        <interface>org.infrastructurebuilder.util.artifacts.ChecksumEnabled</interface>
      </interfaces>
      <fields>
        <field>
          <name>index</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Describes the IBfield from a base of 0.  Default value set to -1 to ensure setting proper index.  Indices are
            forced reset prior to persistence.</description>
          <type>int</type>
          <defaultValue>-1</defaultValue>
        </field>
        <field>
          <name>name</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>The full name of the IBField.  This name may be munged during translation.</description>
          <type>String</type>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0+</version>
          <description>A detailed description of the IBField</description>
          <type>String</type>
        </field>
        <field>
          <name>type</name>
          <description>Value must match the typing enumeration in IBData (currently found in IBDataStructuredDataMetadataType).

          The default value (STREAM) indicates that this schema denotes a single file that is a stream of bytes, and that that
          is the most structure that can be inferred.  Due to the nature of STREAM, it is very important to correctly
          set the IBField type.</description>
          <type>String</type>
          <required>true</required>
          <defaultValue>STREAM</defaultValue>
        </field>
        <field>
          <name>nullable</name>
          <description>If true, then this field is allowed to be null.</description>
          <type>boolean</type>
          <required>true</required>
          <defaultValue>false</defaultValue>
        </field>
        <field>
          <name>enumerations</name>
          <description>List of named enumerations for this field.</description>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <required>false</required>
        </field>
        <field>
          <name>versionAppeared</name>
          <description>version where this IBField became valid.  Versions should be truncated to api version.
              This field is required when updating a schema to a new version.</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field>
          <name>deprecated</name>
          <description>If set to true, this IBField is deprecated.

          Schema deprecation is different than language deprecation.

          A deprecated field is not represented in outbound
          schema, but might be accepted as inbound schema.  Deprecation definitely means different things to different
          underlying providers, but it may (likely) not be possible to back out a deprecation.

          For some providers, the only means of moving forward is to re-add
          the field as a new field with a later "versionAppeared".</description>
          <type>boolean</type>
          <required>false</required>
        </field>
        <field>
          <name>versionDeprecated</name>
          <description>version where this IBField became invalid.  Versions should be truncated to api version.
              This field is required when producing a deprecation (note that a non-null value here does not indicate a
              deprecation.  The flag must still be set in order to deprecate).</description>
          <type>String</type>
          <required>false</required>
        </field>
        <field>
          <name>metadata</name>
          <version>1.0.0+</version>
          <required>true</required>
          <description>Additional metadata</description>
          <type>DOM</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public org.infrastructurebuilder.util.artifacts.Checksum asChecksum() {
    return org.infrastructurebuilder.util.artifacts.ChecksumBuilder.newInstance()
        .addString(getName())
        .addString(getDescription())
        .addString(getMetadata().toString())
        .addString(getVersionAppeared())
        .addString(getVersionDeprecated())
        .addBoolean(isNullable())
//        .addListChecksumEnabled(getX().stream().collect(java.util.stream.Collectors.toList()))
        .asChecksum();
  }

            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            // Default constructor
  public IBField() {
  }
            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            // "Copy constructor"
  public IBField(IBField ds) {
    this.setIndex(ds.getIndex());
    this.setName(ds.getName());
    this.setDescription(ds.getDescription());
    this.setType(ds.getType());
    this.setNullable(ds.isNullable());
    this.setEnumerations(getEnumerations().stream().collect(java.util.stream.Collectors.toList()));
    this.setVersionAppeared(ds.getVersionAppeared());
    this.setDeprecated(ds.isDeprecated());
    this.setVersionDeprecated(ds.getVersionDeprecated());
    this.setMetadata(ds.getMetadata());
  }
            ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
            // Clone hooks

  private void mutatingIBFieldCloneHook(IBField s) {
  }

  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>1.0.0+</version>
          <code>
            <![CDATA[
  @Override
  public int hashCode() {
    return java.util.Objects.hash(index,name, description, type, nullable, enumerations, versionAppeared, deprecated, versionDeprecated, metadata);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    IBField other = (IBField) obj;
    return
           java.util.Objects.equals(index, other.index)
        && java.util.Objects.equals(name, other.name)
        && java.util.Objects.equals(description, other.description)
        && java.util.Objects.equals(type, other.type)
        && java.util.Objects.equals(nullable, other.nullable)
        && java.util.Objects.equals(enumerations, other.enumerations)
        && java.util.Objects.equals(versionAppeared, other.versionAppeared)
        && java.util.Objects.equals(deprecated, other.deprecated)
        && java.util.Objects.equals(versionDeprecated, other.versionDeprecated)
        && java.util.Objects.equals(metadata, other.metadata)
        ;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder
      .append("IBField [")
      .append("index=").append(index)
      .append(", name=").append(name)
      .append(", description=").append(description)
      .append(", type=").append(type)
      .append(", nullable=").append(nullable)
      .append(", enumerations=").append(enumerations)
      .append(", versionAppeared=").append(versionAppeared)
      .append(", deprecated=").append(deprecated)
      .append(", versionDeprecated=").append(versionDeprecated)
      .append(", metadata=").append(metadata)
      .append("]");
    return builder.toString();
  }


            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>


  </classes>
</model>